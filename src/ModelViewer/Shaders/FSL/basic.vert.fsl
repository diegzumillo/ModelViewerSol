#include "resources.h.fsl"
STRUCT(VSInput)
{
    DATA(float3, Position1, POSITION);
    DATA(float3, Normal1, NORMAL);
    // Remove Position2, Normal2, Color2 since we're not morphing
    DATA(float4, Color1, TEXCOORD0);
};

STRUCT(VSOutput)
{
    DATA(float4, Position, SV_Position);
    DATA(float4, Color, COLOR);
};

VSOutput VS_MAIN(VSInput In, SV_InstanceID(uint) InstanceID)
{
    INIT_MAIN;
    VSOutput Out;
    
    // Just use mvp and first world transform
    float4x4 tempMat = mul(uniformBlock.mvp, uniformBlock.toWorld[0]);
    
    // No interpolation needed
    //Out.Position = mul(tempMat, float4(In.Position1, 1.0f));
    Out.Position = mul(tempMat, float4(In.Position1 * 1.0, 1.0f));  // Double size
    
    float4 normal = normalize(mul(uniformBlock.toWorld[0], float4(In.Normal1, 0.0f)));
    float4 pos = mul(uniformBlock.toWorld[0], float4(In.Position1, 1.0f));
    
    // Keep the lighting calculation for now
    float lightIntensity = 1.0f;
    float ambientCoeff = 0.1;
    float3 lightDir = normalize(uniformBlock.lightPosition.xyz - pos.xyz);
    float3 baseColor = (uniformBlock.color[0].rgb + In.Color1.rgb) / 2.0f;
    float3 blendedColor = (uniformBlock.lightColor.rgb * baseColor) * lightIntensity;
    float3 diffuse = blendedColor * max(dot(normal.xyz, lightDir), 0.0);
    float3 ambient = baseColor * ambientCoeff;
    Out.Color = float4(diffuse + ambient, 1.0);
    
    RETURN(Out);
}